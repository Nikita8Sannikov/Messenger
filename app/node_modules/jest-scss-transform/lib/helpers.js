"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(r, a) { if (r) { if ("string" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }
function _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(r) { if (Array.isArray(r)) return r; }
/**
 * helpers.js
 * @fileOverview Utility functions used by jest-scss-transform.
 */

var fs = require('fs');
var crypto = require('crypto');
// eslint-disable-next-line import/no-extraneous-dependencies
var jest = require('jest');
var exportStartRegex = /\n:export.{\n*/;
var exportEndRegex = /\n*}/;
var commentsMatcher = /(\/\*([\s\S]*?)\*\/)|(\/\/(.*)$)/gm;
var endOfLineMatcher = /;/g;
var scssFileExtMatcher = /.scss$/;
var sepStr = ':';
var emptyStr = '';
module.exports.getExported = function (str) {
  return str.split(exportStartRegex)[1].split(exportEndRegex)[0];
};
module.exports.getStrippedSource = function (str) {
  return str.replace(commentsMatcher, emptyStr).trim();
};
module.exports.hasExports = function (str) {
  return exportStartRegex.test(str);
};
module.exports.isSupportedFile = function (filename) {
  return scssFileExtMatcher.test(filename);
};
module.exports.makeExportsString = function () {
  var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return "module.exports = ".concat(JSON.stringify(obj), ";");
};
module.exports.getLines = function (str) {
  return str.split(endOfLineMatcher).map(function (line) {
    return line.trim();
  }).filter(function (line) {
    return !!line.length;
  });
};
module.exports.parseExportsToObject = function (lines) {
  return lines.reduce(function (obj, line) {
    var _line$split = line.split(sepStr),
      _line$split2 = _slicedToArray(_line$split, 2),
      name = _line$split2[0],
      value = _line$split2[1];
    return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, name.trim(), value.trim().replace(endOfLineMatcher, emptyStr)));
  }, {});
};
module.exports.getCacheKey = function () {
  return crypto.createHash('md5').update(fs.readFileSync(__filename)).digest('hex');
};
module.exports.makeProcessExports = function (exportString) {
  // jest.getVersion() returns semantic version, like X.Y.Z
  // We are only interested in the major version (the "X") in this case.
  var _jest$getVersion$spli = jest.getVersion().split('.'),
    _jest$getVersion$spli2 = _slicedToArray(_jest$getVersion$spli, 1),
    major = _jest$getVersion$spli2[0];
  var majorInt = parseInt(major, 10);
  if (majorInt < 27) {
    // For jest versions 26.x.x and bellow, we are fine with just returning
    // the exports as a string
    return exportString;
  }

  // For jest version 27.x.x and above, we want to return an object with a
  // "code" property, which contains an export string (see here: https://jestjs.io/docs/code-transformation)
  return {
    code: exportString
  };
};